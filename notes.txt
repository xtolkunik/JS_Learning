JavaScript has dynamic typing: they are determined automatically.
Value has type, NOT variable!

7 primitive data types:

1. Number: let num = 27;
2. String: let str = 'Text';
3. Boolean: let isIsland = true;
4. Undefined: let children;
5. Null: empty value; 
6. Symbol: Value that si unique and connot be changed (not useful)
7. BigInt: larger integers than the Number type can hold

Operator typeof - check type of variable's value 
typeof undefined === undefined
BUT! 
typeof null === object 
It's a js bug! 

Variables: let, const and var 
let - mutable variable 
const -  immutable variable (cannot be declare without initialize)
var - legacy version of let. It is function-scoped variable, when let is block scoped. Don't use!

tips: if we initialize variable without declare it, it will be global variable. 

Strings and template literals: 
We can use different quotes: 'single', "double" or `backticks`.
Single: 'I'm Nikita' - error 
Double: "I'm Nikita" + variable - ok
Backticks: `I'm Nikita ${someVar}` - ok 
And with backticks we can create multiline strings: 
`wow
it's just
work!` - like this.

Conversion
We can use manually coversion with Number(), String() or Boolean() functions. 
If we will try convert some wrong string to number, we will get NaN. But typeof NaN is number. It's just a wrong number. 
And we have automatic conversion. When we use some operators with different data types: 
String + Number - convert Number to String and then concate it.
String - or * or / Number - Try to convert String to Number otherwise NaN.

Falsy and Truthy conversion 
Only 5 falsy values: 0, '', undefined, NaN, null 

Different equality operators: == vs ===
== with type conversion, '18' == 18 - true 
=== without type conversion, strict version. '18' === 18 - false


Strict switch! And don't forget about break line.
switch(var) {
    case 'monday': // day === 'monday'
            console.log();
            console.log();
            break;
    default: 
            console.log();
}


// IF ELSE HINTS 
Ternary operator produce a value, so we can use it like expression
age >= 18 ? console.log('Let's go drink!') : console.log('Oh, sorry man');
console.log(`I like to drink ${age >= 18 ? 'wine' : 'water'}!`); - because ternary is expression.


// FUNCTION SECTION 
Function declaration vs function expression. 
We cannot use expression function before variable was been initialize!
Arrow function has no this pointer/keyword!

//declaration: 
function f1() {
    return "it's declaration";
}

//expression: 
const f2 = function() {
    return "it's expression";
}

//Arrow function 
const arrFunc = (par1, par2) => {
    console.log();
    return "it's arrow function!"
}

// ARRAY 
Different initialization types: 
const arr1 = ['first', 'second'];
const arr2 = new Array('first', 'second');

arr1.length() - length of the arrray 
arr1.push('Jay'); - add element to the end of array, return length
arr1.unshift('John') - add element to the start of array, return length  
arr1.pop() - remove last element and return it 
arr1.shift() - remove the first element of the array
arr1.indexOf('Steven') - return index of element or -1 
arr1.includes('Steven') - return true/false

// OBJECTS
It's not a class, it's just a one object, one instance. And it's work like map!
this points to object, which called function. 

const jonas = {
    firstName: 'Jonas',
    secondName: 'Tolkunov',
    birthYear: 1999;
    job: 'developer',
    friends: ['Olya', 'Evgen']

    calcAge: function() {
        this.age = 2037 - this.birthYear;
        return this.age;
    }
};

jonas.realtionship = 'in love'; - add new property to object 

Dot vs Bracket notation:
console.log(jonas.firstName); 
console.log(jonas['first' + 'Name']) - we can use expression within brackets! 

